# -*- coding: utf-8 -*-
"""2b.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oJtSjxJ8xYiNrJV_-y-8al8HCmMGznMh
"""

#import lib
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

#import data
from google.colab import files
uploaded = files.upload()

#STEP 3
# Read Data
df = pd.read_csv('orderdataset.csv', delimiter=';')
# Checking for missing values
print("Missing values in each column:\n", df.isnull().sum())

# Handling missing values (Example: fill with mean or median)
df.fillna(df.mean(numeric_only=True), inplace=True)

# Ensure data consistency (Example: removing duplicates)
df.drop_duplicates(inplace=True)

# Step 4: Summarize the data with statistical analysis
# Descriptive statistics
print("Descriptive statistics:\n", df.describe())

# Aggregation functions
# Menambah kolom penjualan
df['Sales'] = df['quantity'] * df['price']

# Statistik deskriptif
total_sales = df['Sales'].sum()
average_sales = df['Sales'].mean()
min_sales = df['Sales'].min()
max_sales = df['Sales'].max()

print(f"Total Sales: {total_sales}")
print(f"Average Sales: {average_sales}")
print(f"Min Sales: {min_sales}")
print(f"Max Sales: {max_sales}")

# Produk dengan penjualan tertinggi
top_products = df.groupby('product_category_name').sum().sort_values(by='Sales', ascending=False).head(10)
print("Top 10 products by sales:\n", top_products)

# Step 5: Statistical methods for correlation/comparative/distribution/trending analysis
# Example: Pearson correlation between Sales and Quantity
correlation, _ = pearsonr(df['Sales'], df['quantity'])
print("Pearson correlation between Sales and Quantity:", correlation)

# Step 6: Visualize the data
# 1. Sales distribution
plt.figure(figsize=(10, 6))
sns.histplot(df['price'], kde=True)
plt.title('Sales Distribution')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()

# 2. Sales by Product
plt.figure(figsize=(12, 8))
sns.barplot(x=top_products.index, y=top_products['price'])
plt.title('Top 10 Products by Sales')
plt.xlabel('Product')
plt.xticks(rotation=45)
plt.ylabel('Sales')
plt.show()

# 3. Sales vs Quantity
plt.figure(figsize=(10, 6))
sns.scatterplot(x='quantity', y='price', data=df)
plt.title('Sales vs Quantity')
plt.xlabel('Quantity')
plt.ylabel('Sales')
plt.show()